var cookie = require('cookie'),
	db_connect = require('db_connect'),
	crypto = require('crypto'),
	mongodb = db_connect.mongodb,
	ObjectId = mongodb.ObjectID,
	db = {}, controller = {};

function md5 (str){ return str ? crypto.createHash('md5').update(str).digest('hex') : '' }

db_connect(function (e, database){ if(e) throw e; db = database });

controller.auth = function (req, res, cb){
	if(typeof req.body !== 'object') return cb(false);
	var cred = JSON.parse(JSON.stringify(req.body));
	cred.password = md5(cred.password);
	if(!cred.username || !cred.password) cred = cookie.parse(req);
	if(!cred.username || !cred.password) return cb(false);
	
	db.user.findOne({name: cred.username, password: cred.password}, function (e, user){
		if(e) return cb(e);
		if(!user) return cb(null, false);
		res.setHeader('Set-Cookie', cookie.stringify({username:user.name,password:user.password}));
		delete user.password;
		cb(null, user);
	});
}

controller.logout = function (req, res, cb){
	res.setHeader('Set-Cookie', ['username=','password=']);
	cb();
}

controller.api = function (req, res, cb){
	var pathname = req.uri.pathname.slice(5);
	function pathstart (s){ return pathname.indexOf(s) === 0 };
	if(pathstart('items'))
		db.item.find({}).toArray(cb)
	else if(pathstart('item/'))
		pathname.slice(5).length !== 24 ? cb(null, '{}')
		: db.item.findOne({_id:ObjectId(pathname.slice(5))}, cb)
	else if(pathstart('lists'))
		db.list.find({}).toArray(cb)
	else if(pathstart('list/'))
		pathname.slice(5).length !== 24 ? cb(null, '{}')
		: db.list.findOne({_id:ObjectId(pathname.slice(5))}, function (e, list){
			if(e || !list) return cb(e);
			var itemids = list.items, items = [];
			(function next_item (id){
				if(!(id = itemids.shift())){
					list.items = items;
					return cb(e, list);
				}
				db.item.findOne({_id:ObjectId(id)}, function (e, item){
					if(e) return;
					item && items.push(item);
					next_item();
				});
			}());
		})
	else if(pathstart('users'))
		db.user.find({}, {password:false}).toArray(cb)
	else if(pathstart('user/'))
		pathname.slice(5).length !== 24 ? cb(Error('No User Specified'))
		: db.user.findOne({_id:ObjectId(pathname.slice(5))}, {password:false}, cb)
	else if(pathstart('add/'))
		addroute(req, res, cb)
	else
		cb(Error('Invalid Path'));
}

function addroute (req, res, cb){
	if(req.method !== 'POST' || typeof req.body !== 'object')
		return cb(Error('Method Not Allowed'));
	
	var pathname = req.uri.pathname.slice(9);
	function pathstart (s){ return pathname.indexOf(s) === 0 };
	if(pathstart('list/') && (req.body.name||'').trim())
		db.list.insert({name:req.body.name, date:Date.now(), items:[]}, cb);
	else if(pathstart('list_item/') && (req.body.name||'').trim())
		db.item.findOne({name:req.body.name.trim()}, function (e, item){
			if(e) return cb(e);
			if(item)
				db.list.update({_id:ObjectId(req.body.listid)}, {$addToSet:{items:ObjectId(item._id)}}, cb);
			else
				db.item.insert({name:req.body.name.trim(), date:Date.now(), inventory:0, par:1}, function (e, data){
					if(e) return cb(e);
					var item = data[0];
					db.list.update({_id:ObjectId(req.body.listid)}, {$push:{items:ObjectId(item._id)}}, cb);
				});
		});
	else if(pathstart('item/') && (req.body.name||'').trim())
		db.item.insert({name:req.body.name.trim(), date:Date.now(), inventory:0, par:1}, cb);
	else
		cb(Error('Invalid Path'));
}

module.exports = controller;
